{"version":3,"sources":["components/ListNav.js","components/ListMsg.js","components/EditorMsg.js","App.js","serviceWorker.js","index.js"],"names":["channels","onClick","currentChannel","StyledMenuList","map","channel","StyledMenuItem","key","id","selected","ListItemIcon","ListItemText","primary","name","withStyles","theme","backgroundColor","color","width","borderRadius","MenuItem","props","MenuList","messages","List","component","aria-label","msg","ListItem","Typography","content","classes","useStyles","useState","inputValue","setInputValue","className","container","noValidate","autoComplete","TextField","label","multiline","rows","defaultValue","textField","margin","variant","onChange","e","console","log","target","value","handleType","Button","button","disabled","makeStyles","display","alignItems","justifyContent","marginLeft","spacing","marginRight","dense","marginTop","menu","input","root","summary","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","palette","text","secondary","App","data","setData","setCurrent","setMessages","useEffect","fetch","process","then","response","json","myJson","JSON","stringify","bind","catch","error","alert","message","i","findChannelIndex","cid","findIndex","channelClick","msgs","newdata","index","React","expanded","setExpanded","handleChange","event","isExpanded","newexpanded","panelstatus","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","ListNav","ListMsg","EditorMsg","v","url","method","headers","body","putData","buttonClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c157025a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withStyles, createMuiTheme } from '@material-ui/core/styles';\r\n// import Button from '@material-ui/core/Button';\r\n// import Menu from '@material-ui/core/Menu'; //needs to be anchored to a button or\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport NotificationsNone from '@material-ui/icons/NotificationsNone';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\nexport default ({ channels, onClick, currentChannel }) => {\r\n\r\n   // const classes = useStyles();\r\n\r\n   return (\r\n      <div>\r\n         <StyledMenuList >\r\n            {channels.map(\r\n               (channel) => {\r\n                  return (\r\n                     <StyledMenuItem key={channel.id}\r\n                        onClick={() => onClick(channel.id)}\r\n                        selected={currentChannel === channel.id}\r\n                     // classes={{ selected: classes.selected }}\r\n                     >\r\n                        <ListItemIcon>\r\n                           <NotificationsNone />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={channel.name} />\r\n                     </StyledMenuItem>\r\n                  )\r\n               }\r\n            )}\r\n         </StyledMenuList>\r\n      </div>\r\n\r\n   )\r\n\r\n}\r\n\r\n\r\n\r\n//  https://material-ui.com/customization/palette/\r\nconst StyledMenuItem = withStyles(theme => ({\r\n   // root: {\r\n   //    '&:active': {\r\n   //       backgroundColor: theme.palette.primary.light,\r\n   //       '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n   //          color: theme.palette.common.white,\r\n   //       },\r\n   //    },\r\n   // },\r\n   selected: {\r\n      backgroundColor: '#FFE5E5 !important',\r\n      color: '#666666 !important',\r\n      width: '105%',\r\n      borderRadius: '8px'\r\n   },\r\n}))(MenuItem);\r\n// The MenuItem is a wrapper around ListItem with some additional styles. You can use the same list composition features with the MenuItem component\r\n\r\n// className={`${this.props.isActive? 'is-active' : ''}`}\r\nconst StyledMenuList = withStyles({\r\n   // paper: {\r\n   //   border: '1px solid #d3d4d5',\r\n   // },\r\n})(props => (\r\n   <MenuList\r\n      {...props}\r\n   />\r\n));\r\n\r\n\r\n// const useStyles = makeStyles(theme => ({\r\n//    root: props => ({\r\n//       backgroundColor: props.backgroundColor,\r\n//       color: theme.color,\r\n//    }),\r\n//    selected: {\r\n//       backgroundColor: 'orange !important',\r\n//    },\r\n// }));\r\n\r\n\r\n// const theme = createMuiTheme({\r\n//    overrides: {\r\n//       MuiMenuItem: {\r\n\r\n//          root: {\r\n//             '&$selected': {\r\n//                backgroundColor: 'orange',\r\n//             },\r\n//          },\r\n//       },\r\n//    },\r\n// });","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\n\r\nexport default ({ messages }) => {\r\n    return (\r\n        <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n            {messages.map(\r\n                (msg) => {\r\n                    return (<ListItem key={msg.id}>\r\n                        <ListItemIcon>\r\n                            <MessageIcon />\r\n                        </ListItemIcon>\r\n                        <Typography>{msg.content}</Typography>\r\n                    </ListItem>\r\n                    )\r\n                }\r\n            )}\r\n        </List>\r\n    )\r\n}","import React , {useState}from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nexport default ({ onClick, currentChannel }) => {\r\n    const classes = useStyles();\r\n\r\n    // textInput must be declared here so the ref can refer to it\r\n    // let areaInput = React.createRef();\r\n\r\n    let [inputValue, setInputValue]=useState()\r\n    const handleType = (e)=>{\r\n        console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n \r\n    return (\r\n        <form className={classes.container} noValidate autoComplete=\"off\">\r\n            <TextField\r\n                id=\"outlined-multiline-static\"\r\n                label=\"New Message\"\r\n                multiline\r\n                rows=\"4\"\r\n                defaultValue=\"\"\r\n                className={classes.textField}\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n                onChange={(e)=>handleType(e)}\r\n                value={inputValue}\r\n            />\r\n            <Button onClick={()=>onClick(inputValue)}\r\n                variant=\"outlined\" color=\"primary\" className={classes.button}\r\n                disabled={!currentChannel||!inputValue}>\r\n                <SendIcon /> &nbsp; Submit\r\n            </Button>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        display: 'flex',\r\n        alignItems: 'flex-end',\r\n        justifyContent: 'space-between'\r\n    },\r\n    textField: {\r\n        width: '60vw',\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    dense: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    menu: {\r\n        width: 200,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    input: {\r\n        display: 'none',\r\n    }\r\n}));","import React, { useState, useEffect } from 'react';\nimport ListNav from './components/ListNav.js';\nimport ListMsg from './components/ListMsg.js';\nimport EditorMsg from './components/EditorMsg.js';\n\n// npm install @material-ui/core\n// npm install @material-ui/icons\nimport { makeStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [currentChannel, setCurrent] = useState(null);\n  const [messages, setMessages] = useState([]);\n\n\n\n// only run on mount with []\n  useEffect(() => {\n    fetch(process.env.REACT_APP_API + 'channels/')\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (myJson) {\n        console.log(JSON.stringify(myJson));\n        setData(myJson);\n        // this.setState(\n        //   { data: myJson }\n        // )\n      }.bind(this))\n      .catch(error => alert(\"FETCH CHANNELS FAILED: \" + error.message));\n\n  }, [])\n\n\n  // runs after every render (by default)\n  useEffect(\n    () => {\n      let i = findChannelIndex(currentChannel);\n      console.log('found', i)\n      if (data[i] && data[i].messages) {\n        setMessages(data[i].messages);      \n      }\n    }\n  )\n\n  const findChannelIndex = (cid) => {\n    return data.findIndex(\n      (channel) => (channel.id === cid)\n    )\n  }\n\n\n  const channelClick = (cid) => {\n    console.log('cid', cid);\n    let i = findChannelIndex(cid);\n    console.log('iiiiiiii', i);\n\n    setCurrent(cid);\n\n    fetch(process.env.REACT_APP_API + 'messages/' + cid)\n      .then((response) => {\n        return response.json();\n      })\n      .then((msgs) => {\n        console.log(\"messages\" + JSON.stringify(msgs));\n\n        let newdata = data.map((channel, index) => {\n          console.log('index now', index, i);\n          if (index !== i) {\n            // keep it as-is\n            return channel\n          }\n          //  switching the whole messages arr for one particular channel obj\n          return {\n            ...channel, messages: msgs\n          }\n        })\n        console.log('newdata', newdata);\n        setData(newdata);\n      })\n      .catch(error => alert(\"FETCH CHANEL MESSAGES FAILED: \" + error.message));\n  }\n\n  const buttonClick = (v) => {\n    console.log('submit value', v);\n\n    putData(process.env.REACT_APP_API + currentChannel, { \"user\": \"default\", \"content\": v })\n      .then(data => console.log(JSON.stringify(data))) // JSON-string from `response.json()` call\n      .catch(error => console.error(error));\n\n    function putData(url = '', data = {}) {\n      // Default options are marked with *\n      console.log('url', url);\n\n      return fetch(url, {\n        method: 'PUT', // *GET, POST, PUT, DELETE, etc.\n        // mode: 'no-cors', // no-cors, cors, *same-origin\n        // cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        // credentials: 'omit', // include, *same-origin, omit\n        headers: {\n          'Content-Type': 'application/json',\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        // redirect: 'follow', // manual, *follow, error\n        // referrer: 'no-referrer', // no-referrer, *client\n        body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n      })\n        // parses JSON response into native JavaScript objects \n        .then(response => response.json()).then(\n          (msg) => {\n            console.log('msg after put', msg)\n          }\n        )\n        .catch(error => alert(\"ADD MESSAGE FAILED: \" + error.message));\n    }\n  }\n\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState([true, true, true]);\n\n  const handleChange = i => (event, isExpanded) => {\n    let newexpanded = expanded.map(\n      (panelstatus, index) => {\n        if (index === i) {\n          return !panelstatus;\n        } else {\n          return panelstatus\n        }\n      }\n    )\n    setExpanded(newexpanded);\n  };\n\n  return (\n    <div className=\"App\">\n\n\n      <div className={classes.root}>\n        <ExpansionPanel expanded={expanded[0]} onChange={handleChange(0)} >\n          <ExpansionPanelSummary className={classes.summary}\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1bh-content\"\n            id=\"panel1bh-header\">\n            <Typography className={classes.heading}>Channels</Typography>\n          </ExpansionPanelSummary >\n          <ExpansionPanelDetails>\n            <ListNav channels={data} onClick={(cid) => channelClick(cid)} \n            currentChannel={currentChannel} ></ListNav>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n\n        <ExpansionPanel expanded={expanded[1]} onChange={handleChange(1)} >\n          <ExpansionPanelSummary className={classes.summary}\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel2bh-content\"\n            id=\"panel2bh-header\">\n            <Typography className={classes.heading}>Messages</Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <ListMsg messages={messages} currentChannel={currentChannel} ></ListMsg>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n\n        <ExpansionPanel expanded={expanded[2]} onChange={handleChange(2)}>\n          <ExpansionPanelSummary className={classes.summary}\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel3bh-content\"\n            id=\"panel3bh-header\"\n          >\n            <Typography className={classes.heading}>Add A Message</Typography>\n            {/* <Typography className={classes.secondaryHeading}></Typography> */}\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <EditorMsg onClick={(v) => buttonClick(v)} currentChannel={currentChannel} ></EditorMsg>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n\n      </div>\n    </div>\n\n\n  );\n\n}\n\n// USE STYLES return a style class obj\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n  },\n  summary: {\n    backgroundColor: '#EEEEEE',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}